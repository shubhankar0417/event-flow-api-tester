{"uid":"4640a8b46eef7ff9","name":"test_simulate_lambda_service_failure","fullName":"tests.test_aws_pipeline#test_simulate_lambda_service_failure","historyId":"1c012a75206bf3a625553c69b63fc178","time":{"start":1753181828916,"stop":1753181840227,"duration":11311},"status":"failed","statusMessage":"AssertionError: 3. Failure - LAMBDA FUNCTION FAILED:\n  SQS:None\n  S3:None\nassert False == True","statusTrace":"def test_simulate_lambda_service_failure():\n        config = get_config()\n    \n        # take the returned response from fetch guardian article function\n        guardian_api_response = get_guardian_articles(config['CATEGORY'])\n        assert guardian_api_response.status_code == 200, (\n            f'1. Failure - GET API FAILED: {guardian_api_response.status_code}'\n        )\n        print('1. Success - GET API PASSED')\n    \n        # Send the data to the SQS queue\n        message = guardian_api_response.json()\n        sqs_response = send_message_to_sqs(message)\n        sqs_response_status = sqs_response['ResponseMetadata']['HTTPStatusCode']\n        assert sqs_response_status == 200, (\n            f'2. Failure - SQS QUEUE FAILED: {sqs_response_status}'\n        )\n        print('2. Success - SQS QUEUE PASSED')\n    \n        # verify lambda is triggered from sqs\n        time.sleep(10)\n        lambda_status, sqs_message, s3_message = check_lambda_logs_in_cloud_watch(fail_on_purpose=True)\n>       assert lambda_status == True, (f'3. Failure - LAMBDA FUNCTION FAILED:\\nSQS:{sqs_message}\\nS3:{s3_message}')\nE       AssertionError: 3. Failure - LAMBDA FUNCTION FAILED:\nE         SQS:None\nE         S3:None\nE       assert False == True\n\ntests/test_aws_pipeline.py:61: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: 3. Failure - LAMBDA FUNCTION FAILED:\n  SQS:None\n  S3:None\nassert False == True","statusTrace":"def test_simulate_lambda_service_failure():\n        config = get_config()\n    \n        # take the returned response from fetch guardian article function\n        guardian_api_response = get_guardian_articles(config['CATEGORY'])\n        assert guardian_api_response.status_code == 200, (\n            f'1. Failure - GET API FAILED: {guardian_api_response.status_code}'\n        )\n        print('1. Success - GET API PASSED')\n    \n        # Send the data to the SQS queue\n        message = guardian_api_response.json()\n        sqs_response = send_message_to_sqs(message)\n        sqs_response_status = sqs_response['ResponseMetadata']['HTTPStatusCode']\n        assert sqs_response_status == 200, (\n            f'2. Failure - SQS QUEUE FAILED: {sqs_response_status}'\n        )\n        print('2. Success - SQS QUEUE PASSED')\n    \n        # verify lambda is triggered from sqs\n        time.sleep(10)\n        lambda_status, sqs_message, s3_message = check_lambda_logs_in_cloud_watch(fail_on_purpose=True)\n>       assert lambda_status == True, (f'3. Failure - LAMBDA FUNCTION FAILED:\\nSQS:{sqs_message}\\nS3:{s3_message}')\nE       AssertionError: 3. Failure - LAMBDA FUNCTION FAILED:\nE         SQS:None\nE         S3:None\nE       assert False == True\n\ntests/test_aws_pipeline.py:61: AssertionError","steps":[],"attachments":[{"uid":"52a7eedf2ca263fa","name":"stdout","source":"52a7eedf2ca263fa.txt","type":"text/plain","size":58}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_aws_pipeline"},{"name":"host","value":"pkrvmq0rgcvqdmg"},{"name":"thread","value":"2443-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_aws_pipeline"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"4640a8b46eef7ff9.json","parameterValues":[]}